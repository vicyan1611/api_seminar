# Define parameters for caching
# path: where cache files are stored
# levels: directory structure levels for cache
# keys_zone: name and size of the shared memory zone to store cache keys
# inactive: duration after which cached data is removed if not accessed
# max_size: maximum size of the cache on disk
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m inactive=60m max_size=1g;

server {
    listen 80;
    server_name localhost; # Or your domain

    # Location for API requests
    location /api/ {
        # --- Define Upstream ---
        # 'api' matches the service name in docker-compose.yml
        # '3000' is the port the Node.js app listens on inside its container
        proxy_pass http://api:3000;

        # --- Proxy Headers ---
        # Set standard headers for the backend application
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # --- Caching Configuration ---
        proxy_cache api_cache; # Use the cache zone defined above
        proxy_cache_key "$scheme$request_method$host$request_uri"; # Unique key for caching
        proxy_cache_valid 200 301 302 1m; # Cache 200, 301, 302 responses for 1 minute
        proxy_cache_valid 404 1m;         # Cache 404s briefly
        proxy_cache_valid any 10s;        # Cache other responses for 10 seconds

        # Only cache GET and HEAD requests (common practice)
        proxy_cache_methods GET HEAD;

        # Avoid caching if certain headers are present (e.g., Bypass-Cache)
        proxy_cache_bypass $http_bypass_cache;
        # Do not serve from cache if certain headers are present
        proxy_no_cache $http_bypass_cache;

        # Add a header to see cache status (HIT, MISS, EXPIRED, etc.) - useful for demo!
        add_header X-Proxy-Cache $upstream_cache_status;

        # Optional: Increase buffer sizes if needed for larger requests/responses
        # proxy_buffers 8 16k;
        # proxy_buffer_size 32k;
    }

    # Optional: Location for health check (bypass cache)
    location /health {
         proxy_pass http://api:3000/health;
         # Ensure health checks always hit the backend
         proxy_cache_bypass 1;
         proxy_no_cache 1;
         # Add proxy headers if your health check needs them
         proxy_set_header Host $host;
         proxy_set_header X-Real-IP $remote_addr;
    }

    # Optional: Serve static files directly via Nginx (if needed)
    # location /static/ {
    #    alias /path/to/static/files;
    # }
}
